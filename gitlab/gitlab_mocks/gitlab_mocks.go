// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab/gitlab_interfaces/gitlab_interfaces.go

// Package gitlab is a generated GoMock package.
package gitlab_mocks

import (
	gitlab_structs "git-good-discord/gitlab/gitlab_structs"
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockInterface is a mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// RegisterWebhook mocks base method
func (m *MockInterface) RegisterWebhook(project gitlab_structs.Project, webhook gitlab_structs.Webhook) (gitlab_structs.WebhookRegistration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterWebhook", project, webhook)
	ret0, _ := ret[0].(gitlab_structs.WebhookRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterWebhook indicates an expected call of RegisterWebhook
func (mr *MockInterfaceMockRecorder) RegisterWebhook(project, webhook interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterWebhook", reflect.TypeOf((*MockInterface)(nil).RegisterWebhook), project, webhook)
}

// GetRegisteredWebhooks mocks base method
func (m *MockInterface) GetRegisteredWebhooks(project gitlab_structs.Project) ([]gitlab_structs.WebhookRegistration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegisteredWebhooks", project)
	ret0, _ := ret[0].([]gitlab_structs.WebhookRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegisteredWebhooks indicates an expected call of GetRegisteredWebhooks
func (mr *MockInterfaceMockRecorder) GetRegisteredWebhooks(project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisteredWebhooks", reflect.TypeOf((*MockInterface)(nil).GetRegisteredWebhooks), project)
}

// DoesWebhookWithURLExist mocks base method
func (m *MockInterface) DoesWebhookWithURLExist(project gitlab_structs.Project, invocationURL string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoesWebhookWithURLExist", project, invocationURL)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoesWebhookWithURLExist indicates an expected call of DoesWebhookWithURLExist
func (mr *MockInterfaceMockRecorder) DoesWebhookWithURLExist(project, invocationURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoesWebhookWithURLExist", reflect.TypeOf((*MockInterface)(nil).DoesWebhookWithURLExist), project, invocationURL)
}

// GetWebhookInvocationURL mocks base method
func (m *MockInterface) GetWebhookInvocationURL(discordChannelID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookInvocationURL", discordChannelID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhookInvocationURL indicates an expected call of GetWebhookInvocationURL
func (mr *MockInterfaceMockRecorder) GetWebhookInvocationURL(discordChannelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookInvocationURL", reflect.TypeOf((*MockInterface)(nil).GetWebhookInvocationURL), discordChannelID)
}

// HandleWebhookNotificationHTTP mocks base method
func (m *MockInterface) HandleWebhookNotificationHTTP(w http.ResponseWriter, req *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleWebhookNotificationHTTP", w, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleWebhookNotificationHTTP indicates an expected call of HandleWebhookNotificationHTTP
func (mr *MockInterfaceMockRecorder) HandleWebhookNotificationHTTP(w, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleWebhookNotificationHTTP", reflect.TypeOf((*MockInterface)(nil).HandleWebhookNotificationHTTP), w, req)
}

// GetUserByUsername mocks base method
func (m *MockInterface) GetUserByUsername(instanceURL, username string) (gitlab_structs.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", instanceURL, username)
	ret0, _ := ret[0].(gitlab_structs.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername
func (mr *MockInterfaceMockRecorder) GetUserByUsername(instanceURL, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockInterface)(nil).GetUserByUsername), instanceURL, username)
}

// GetUserByID mocks base method
func (m *MockInterface) GetUserByID(instanceURL string, id int) (gitlab_structs.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", instanceURL, id)
	ret0, _ := ret[0].(gitlab_structs.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID
func (mr *MockInterfaceMockRecorder) GetUserByID(instanceURL, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockInterface)(nil).GetUserByID), instanceURL, id)
}
