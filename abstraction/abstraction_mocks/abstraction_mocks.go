// Code generated by MockGen. DO NOT EDIT.
// Source: ./abstraction/abstraction_interfaces/abstraction_interfaces.go

// Package mock_abstraction_interfaces is a generated GoMock package.
package abstraction_mocks

import (
	gitlab_structs "git-good-discord/gitlab/gitlab_structs"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockInterface is a mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// HandleGitlabNotification mocks base method
func (m *MockInterface) HandleGitlabNotification(notification gitlab_structs.WebhookNotification, discordChannelID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleGitlabNotification", notification, discordChannelID)
}

// HandleGitlabNotification indicates an expected call of HandleGitlabNotification
func (mr *MockInterfaceMockRecorder) HandleGitlabNotification(notification, discordChannelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleGitlabNotification", reflect.TypeOf((*MockInterface)(nil).HandleGitlabNotification), notification, discordChannelID)
}
