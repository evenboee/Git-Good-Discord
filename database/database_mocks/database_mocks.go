// Code generated by MockGen. DO NOT EDIT.
// Source: ./database/database_interfaces/database_interfaces.go

// Package mock_database_interfaces is a generated GoMock package.
package database_mocks

import (
	database_interfaces "git-good-discord/database/database_interfaces"
	database_structs "git-good-discord/database/database_structs"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDatabase is a mock of Database interface
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// ConnectToDatabase mocks base method
func (m *MockDatabase) ConnectToDatabase(errorChan chan error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ConnectToDatabase", errorChan)
}

// ConnectToDatabase indicates an expected call of ConnectToDatabase
func (mr *MockDatabaseMockRecorder) ConnectToDatabase(errorChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectToDatabase", reflect.TypeOf((*MockDatabase)(nil).ConnectToDatabase), errorChan)
}

// GetConnection mocks base method
func (m *MockDatabase) GetConnection() database_interfaces.DatabaseConnection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnection")
	ret0, _ := ret[0].(database_interfaces.DatabaseConnection)
	return ret0
}

// GetConnection indicates an expected call of GetConnection
func (mr *MockDatabaseMockRecorder) GetConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnection", reflect.TypeOf((*MockDatabase)(nil).GetConnection))
}

// MockDatabaseConnection is a mock of DatabaseConnection interface
type MockDatabaseConnection struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseConnectionMockRecorder
}

// MockDatabaseConnectionMockRecorder is the mock recorder for MockDatabaseConnection
type MockDatabaseConnectionMockRecorder struct {
	mock *MockDatabaseConnection
}

// NewMockDatabaseConnection creates a new mock instance
func NewMockDatabaseConnection(ctrl *gomock.Controller) *MockDatabaseConnection {
	mock := &MockDatabaseConnection{ctrl: ctrl}
	mock.recorder = &MockDatabaseConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabaseConnection) EXPECT() *MockDatabaseConnectionMockRecorder {
	return m.recorder
}

// AddSubscriber mocks base method
func (m *MockDatabaseConnection) AddSubscriber(channel_id, gitlab_instance, repo_id, gitlab_username, discord_user_id string, issues, merge_requests bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSubscriber", channel_id, gitlab_instance, repo_id, gitlab_username, discord_user_id, issues, merge_requests)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSubscriber indicates an expected call of AddSubscriber
func (mr *MockDatabaseConnectionMockRecorder) AddSubscriber(channel_id, gitlab_instance, repo_id, gitlab_username, discord_user_id, issues, merge_requests interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubscriber", reflect.TypeOf((*MockDatabaseConnection)(nil).AddSubscriber), channel_id, gitlab_instance, repo_id, gitlab_username, discord_user_id, issues, merge_requests)
}

// GetSubscribers mocks base method
func (m *MockDatabaseConnection) GetSubscribers(channel_id, gitlab_instance, repo_id, gitlab_username string) ([]database_structs.Subscriber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscribers", channel_id, gitlab_instance, repo_id, gitlab_username)
	ret0, _ := ret[0].([]database_structs.Subscriber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscribers indicates an expected call of GetSubscribers
func (mr *MockDatabaseConnectionMockRecorder) GetSubscribers(channel_id, gitlab_instance, repo_id, gitlab_username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscribers", reflect.TypeOf((*MockDatabaseConnection)(nil).GetSubscribers), channel_id, gitlab_instance, repo_id, gitlab_username)
}

// DeleteSubscriber mocks base method
func (m *MockDatabaseConnection) DeleteSubscriber(channel_id, gitlab_instance, repo_id, gitlab_username, discord_user_id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscriber", channel_id, gitlab_instance, repo_id, gitlab_username, discord_user_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscriber indicates an expected call of DeleteSubscriber
func (mr *MockDatabaseConnectionMockRecorder) DeleteSubscriber(channel_id, gitlab_instance, repo_id, gitlab_username, discord_user_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscriber", reflect.TypeOf((*MockDatabaseConnection)(nil).DeleteSubscriber), channel_id, gitlab_instance, repo_id, gitlab_username, discord_user_id)
}

// GetChannelSettings mocks base method
func (m *MockDatabaseConnection) GetChannelSettings(channel_id string) (database_structs.ChannelSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelSettings", channel_id)
	ret0, _ := ret[0].(database_structs.ChannelSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelSettings indicates an expected call of GetChannelSettings
func (mr *MockDatabaseConnectionMockRecorder) GetChannelSettings(channel_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelSettings", reflect.TypeOf((*MockDatabaseConnection)(nil).GetChannelSettings), channel_id)
}

// SetChannelPrefix mocks base method
func (m *MockDatabaseConnection) SetChannelPrefix(channel_id, prefix string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetChannelPrefix", channel_id, prefix)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetChannelPrefix indicates an expected call of SetChannelPrefix
func (mr *MockDatabaseConnectionMockRecorder) SetChannelPrefix(channel_id, prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChannelPrefix", reflect.TypeOf((*MockDatabaseConnection)(nil).SetChannelPrefix), channel_id, prefix)
}

// SetChannelLanguage mocks base method
func (m *MockDatabaseConnection) SetChannelLanguage(channel_id, language string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetChannelLanguage", channel_id, language)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetChannelLanguage indicates an expected call of SetChannelLanguage
func (mr *MockDatabaseConnectionMockRecorder) SetChannelLanguage(channel_id, language interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChannelLanguage", reflect.TypeOf((*MockDatabaseConnection)(nil).SetChannelLanguage), channel_id, language)
}

// GetSecurityToken mocks base method
func (m *MockDatabaseConnection) GetSecurityToken(channel_id, gitlab_instance, repo_id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityToken", channel_id, gitlab_instance, repo_id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityToken indicates an expected call of GetSecurityToken
func (mr *MockDatabaseConnectionMockRecorder) GetSecurityToken(channel_id, gitlab_instance, repo_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityToken", reflect.TypeOf((*MockDatabaseConnection)(nil).GetSecurityToken), channel_id, gitlab_instance, repo_id)
}

// AddSecurityToken mocks base method
func (m *MockDatabaseConnection) AddSecurityToken(channel_id, gitlab_instance, repo_id, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSecurityToken", channel_id, gitlab_instance, repo_id, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSecurityToken indicates an expected call of AddSecurityToken
func (mr *MockDatabaseConnectionMockRecorder) AddSecurityToken(channel_id, gitlab_instance, repo_id, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSecurityToken", reflect.TypeOf((*MockDatabaseConnection)(nil).AddSecurityToken), channel_id, gitlab_instance, repo_id, token)
}

// AddAccessToken mocks base method
func (m *MockDatabaseConnection) AddAccessToken(channel_id, gitlab_instance, repo_id, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAccessToken", channel_id, gitlab_instance, repo_id, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAccessToken indicates an expected call of AddAccessToken
func (mr *MockDatabaseConnectionMockRecorder) AddAccessToken(channel_id, gitlab_instance, repo_id, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccessToken", reflect.TypeOf((*MockDatabaseConnection)(nil).AddAccessToken), channel_id, gitlab_instance, repo_id, token)
}

// GetAccessToken mocks base method
func (m *MockDatabaseConnection) GetAccessToken(channel_id, gitlab_instance, repo_id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessToken", channel_id, gitlab_instance, repo_id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessToken indicates an expected call of GetAccessToken
func (mr *MockDatabaseConnectionMockRecorder) GetAccessToken(channel_id, gitlab_instance, repo_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessToken", reflect.TypeOf((*MockDatabaseConnection)(nil).GetAccessToken), channel_id, gitlab_instance, repo_id)
}

// Close mocks base method
func (m *MockDatabaseConnection) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockDatabaseConnectionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDatabaseConnection)(nil).Close))
}
